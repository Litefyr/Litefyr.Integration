prototype(Litefyr.Integration:Component.Links) < prototype(Neos.Fusion:Component) {
    links = ${q(node).property('links') || []}
    linkInBackend = true
    fallbackContent = ${Translation.translate('more', null, [], null, 'Litefyr.Presentation')}

    // Get applied on wrapper or onto a single button
    class = null

    wrapperClass = 'flex flex-wrap gap-x-6 gap-y-3'

    @private.items = Neos.Fusion:Map {
        items = ${Array.filter(props.links)}
        itemRenderer = Litefyr.Presentation:Atom.Link {
            @if.set = Neos.Neos:ConvertUris {
                value = ${item.href}
            }
            href = ${item.href}
            appearance = ${item.appearance}
            content = ${item.text || props.fallbackContent}
            @process {
                breakAfterLink = ${item.break && !iterator.isLast ? value + '<hr class="basis-full border-none m-0 p-0" />' : value}
                convertUris = Neos.Neos:ConvertUris {
                    @if.set = ${props.linkInBackend}
                    forceConversion = true
                }
            }
        }
        @process.filter = ${Array.filter(value)}
    }

    renderer = afx`
        <Neos.Fusion:Augmenter
            @if={Carbon.Array.check(private.items)}
            class={props.class}
        >
            <Carbon.Eel:Tag
                tagName={props.wrapperClass && Carbon.Array.length(private.items) > 1 ? 'div' : null}
                attributes.class={props.wrapperClass}
            >
                {Array.join(private.items, '')}
            </Carbon.Eel:Tag>
        </Neos.Fusion:Augmenter>
    `
}
