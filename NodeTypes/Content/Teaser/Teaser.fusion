prototype(Litefyr.Integration:Content.Teaser) < prototype(Neos.Neos:ContentComponent) {
    inBackend = ${node.context.inBackend}
    nodes = ${q(node).property('nodes')}
    single = ${!q(node).property('subsites')}
    showImages = ${q(node).property('showImages')}
    textbox = ${q(node).property('textbox')}
    theme = ${q(node).property('theme')}
    headlineFontSize = ${q(node).property('headlineFontSize')}
    featured = ${this.showImages && q(node).property('featured')}
    limit = ${q(node).property('limit')}
    numberOfPlaceholder = ${(this.single ? Carbon.Array.length(this.nodes) : 3) || 3}
    teaserNodeType = ${this.showImages ? (this.textbox ? 'Litefyr.Presentation:Block.Teaser.Textbox' : 'Litefyr.Presentation:Block.Teaser') : 'Litefyr.Presentation:Block.Teaser.Plain'}
    links = Litefyr.Integration:Component.Links

    headline = Neos.Neos:Editable {
        property = 'headline'
        block = false
    }
    text = Neos.Neos:Editable {
        property = 'text'
        block = false
    }
    label = Neos.Neos:Editable {
        property = 'label'
        block = false
    }

    colorGradient = null

    @private {
        placeHolderItems = ${Array.range(1, Math.max(props.numberOfPlaceholder, Carbon.Array.length(props.nodes)))}
        jsonPath = Neos.Fusion:Map {
            @if.hasNodes = ${Carbon.Array.check(props.nodes)}
            items = ${Array.unique(props.nodes)}
            itemRenderer = Neos.Neos:NodeUri {
                node = ${item}
                additionalParams {
                    json = true
                    single = ${q(item).is('[instanceof Litefyr.Integration:Mixin.TeaserDocument.Single]') ? null : props.single ? 'true' : null}
                    limit = ${q(item).is('[instanceof Litefyr.Integration:Mixin.TeaserDocument.Single]') ? null : props.single ? null : props.limit}
                    variant = ${props.showImages ? (props.textbox ? 'Textbox' : null) : 'Plain'}
                }
            }
        }
    }

    renderer = afx`
        <Litefyr.Presentation:Module.TeaserContainer @if={private.jsonPath} jsonPath={private.jsonPath} {...props} bottomTheme={props.theme} colorGradient={props.colorGradient}>
            <Neos.Fusion:Loop items={private.placeHolderItems}>
                <Neos.Fusion:Renderer type={props.teaserNodeType} element.placeholder={true} />
            </Neos.Fusion:Loop>
        </Litefyr.Presentation:Module.TeaserContainer>
        <Carbon.Notification:Backend
            @if={!private.jsonPath}
            type="alert"
            content={Carbon.Backend.translate('noDocumentsSelected', null, [], 'Main', 'Litefyr.Integration')}
        />
    `
}
