prototype(Litefyr.Integration:Document.AbstractPage) < prototype(Neos.Fusion:Component) {
    headTags = null
    hero = null
    content = null
    aside = null
    notification = null
    htmlClass = null
    inlineStyle = null
    preview = null

    bodyRenderer = null

    scrollIndicator = Litefyr.Integration:Component.ScrollIndicator
    disableBreadcrumb = ${q(documentNode).is('[instanceof Litefyr.Integration:Mixin.DisableBreadcrumb]')}

    header = Neos.Fusion:Renderer {
        renderPath = '/header'
    }
    footer  = Neos.Fusion:Renderer {
        renderPath = '/footer'
    }

    replaceLogo = Neos.Fusion:Renderer {
        renderPath = '/replaceLogo'
    }

    asideAttributes = Neos.Fusion:Attributes

    renderer = Neos.Neos:Page {
        htmlTag.attributes.class {
            additionalClass = ${props.htmlClass}
            preview = ${props.preview ? 'preview' : null}
            disableBreadcrumb = ${props.disableBreadcrumb ? 'disable-breadcrumb' : null}
        }
        head {
            headTags = ${props.headTags}
            headTags.@position = 'after titleTag'
            inlineStyle = afx`<style @if={props.inlineStyle}>{props.inlineStyle}</style>`
            inlineStyle.@position = 'end'
        }
        body >
        body = Neos.Fusion:Case {
            @position = 'after bodyTag'
            isPreview {
                condition = ${props.preview}
                renderer = ${props.preview}
            }
            bodyRenderer {
                condition = ${props.bodyRenderer}
                renderer = Neos.Fusion:Renderer {
                    type = ${props.bodyRenderer}
                    element {
                        header = ${props.header}
                        notification = ${props.notification}
                        hero = ${props.hero}
                        content = ${props.content}
                        aside = ${props.aside}
                        asideAttributes = ${props.asideAttributes}
                        footer  = ${props.footer}
                        scrollIndicator  = ${props.scrollIndicator}
                    }
                }
            }

            @process.replaceLogo = Litefyr.Integration:Helper.ReplaceTextWithComponent {
                search = 'âš‘'
                replace = ${props.replaceLogo}
            }
        }
        @process.convertUris = Neos.Neos:ConvertUris
        @cache.mode = 'embed'
    }

    @cache {
        mode = 'cached'
        entryIdentifier {
            documentNode = ${node}
            editPreviewMode = ${node.context.currentRenderingMode.name}
        }
        entryTags {
            1 = ${Neos.Caching.nodeTag(node)}
        }
    }
}
