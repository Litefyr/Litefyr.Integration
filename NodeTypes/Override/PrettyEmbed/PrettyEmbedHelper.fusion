prototype(Jonnitto.PrettyEmbed:Content) {
    breakout = ${q(node).property('breakout')}

    enableText = ${q(node).property('enableText')}
    float = ${q(node).property('float')}
    textMobileBottom = ${q(node).property('textMobileBottom')}
    enableHeadline = ${q(node).property('enableHeadline')}
    headlineFontSize = ${q(node).property('headlineFontSize')}
    enableSpacing = true
    leftColSize = ${q(node).property('leftColSize')}
    textLeft = ${q(node).property('textLeft')}
    theme = ${q(node).property('theme')}
    align = ${q(node).property('align')}

    links = Litefyr.Integration:Component.Links
    headline = Neos.Neos:Editable {
        property = 'headline'
        block = false
    }
    editableLabel = Neos.Neos:Editable {
        property = 'label'
        block = false
    }
    text = Neos.Neos:Editable {
        property = 'text'
    }

    wrapper {
        @if.single = ${!this.enableText}
        @process.rounded = ${this.breakout == 'full' ? Tailwind.merge('mediacontent', value) : Tailwind.merge('mediacontent roundimage', this.breakout == 'wide' ? 'wide:mediacontent:rounded-box wide:imagecontent:rounded-image' : 'mediacontent:rounded-box imagecontent:rounded-image', value)}
    }

    inBackend = ${node.context.inBackend}

    renderer.@process {
        spacing = Litefyr.Presentation:Spacing {
            @if.set = ${props.enableSpacing && !props.enableText && !props.inSlider}
            augmenter = true
            width = ${props.breakout}
            padding = 'auto'
            class = ${props.breakout == 'full' ? Presentation.clippathClass('content', 'media') : null}
        }
        textWithContent = afx`
            <Litefyr.Presentation:Module.TextWithContent @if={props.enableText} stretchContent={true} {...props} label={props.editableLabel} singleContent={value} />
        `
    }
}
