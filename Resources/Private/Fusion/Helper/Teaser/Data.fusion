prototype(Litefyr.Integration:Helper.Teaser.Data) < prototype(Neos.Fusion:Component) {
    overviewData = null

    node = ${this.overviewData ? this.overviewData.node : node}

    dateProperty = null
    /// string Can every string property. If set to getLabel, the label of the node is used
    titleProperty = 'title'

    /// string Process title with a prototype. The title will be passed to value, the node to node and the titleProperty to titleProperty
    processTitlePrototype = null

    category = ${q(this.node).is('[instanceof Litefyr.Integration:Mixin.TeaserDocument.Category]') ? q(this.node).property('category') : null}
    authors = ${q(this.node).is('[instanceof Litefyr.Integration:Mixin.TeaserDocument.Authors]') ? q(this.node).property('authors') : null}
    articleCount = ${q(this.node).is('[instanceof Litefyr.Integration:Mixin.TeaserDocument.Articles]') ? Carbon.Array.length(q(this.node).property('articles')) : null}

    isLightbox = ${q(this.node).is('[instanceof Litefyr.Integration:Document.Lightbox]')}
    lightboxIframeSrc = ${this.isLightbox ? q(this.node).property('iframeSrc') : null}

    category.@if.notFromOveview = ${!this.overviewData}
    authors.@if.notFromOveview = ${!this.overviewData}
    articleCount.@if.notFromOveview = ${!this.overviewData}

    @private.dateProperty = ${props.dateProperty ? props.dateProperty : (q(props.node).is('[instanceof Litefyr.Integration:Mixin.TeaserDocument.Date]') ? '_hiddenBeforeDateTime' : null)}

    renderer = Neos.Fusion:DataStructure {
        identifier = ${q(props.node).property('_identifier')}
        headline = Litefyr.Integration:Helper.Teaser.Data.Title {
            node = ${props.node}
            titleProperty = ${props.titleProperty}
            processTitlePrototype = ${props.processTitlePrototype}
        }
        text = ${String.stripTags(q(props.node).property('teaserText') || q(props.node).property('lead'))}
        images = Neos.Fusion:Case {
            fromOverview {
                condition = ${props.overviewData}
                renderer = Neos.Fusion:Map {
                    items = ${props.overviewData.authors}
                    itemRenderer = Neos.Fusion:DataStructure {
                        @if.hasImage = ${this.imageSource}
                        label = ${item.label}
                        imageSource = Carbon.Image:Helper.ImageSource {
                            image = ${q(item.node).property('image')}
                            dummyBaseWidth = 40
                            dummyBaseHeight = 40
                        }
                        href = ${item.href}
                    }
                }
            }
            default {
                condition = ${Carbon.Array.check(props.authors)}
                renderer = Neos.Fusion:Map {
                    items = ${props.authors}
                    itemRenderer = Neos.Fusion:DataStructure {
                        @if.hasImage = ${this.imageSource}
                        label = ${q(item).property('title')}
                        imageSource = Carbon.Image:Helper.ImageSource {
                            image = ${q(item).property('image')}
                            dummyBaseWidth = 40
                            dummyBaseHeight = 40
                        }
                        href = Neos.Neos:NodeUri {
                            @if.set = ${!q(item).property('_hiddenInIndex')}
                            node = ${item}
                            format = 'html'
                        }
                    }
                }
            }
            @process.filter = ${Carbon.Array.check(value) ? Array.filter(value) : value}
        }
        label = ${props.articleCount ? Translation.translate('numberOfArticles', null, [props.articleCount], 'Main', 'Litefyr.Integration', props.articleCount) : null}
        badges = Neos.Fusion:Case {
            fromOverview {
                condition = ${props.overviewData}
                renderer = ${props.overviewData.categories}
            }
            default {
                condition = ${Carbon.Array.check(props.category)}
                renderer = Neos.Fusion:Map {
                    items = ${props.category}
                    itemRenderer = Neos.Fusion:DataStructure {
                        label = ${Type.isString(item) ? item : q(item).property('title')}
                        href = Neos.Neos:NodeUri {
                            @if.set = ${!Type.isString(item) && !q(item).property('_hiddenInIndex')}
                            node = ${item}
                            format = 'html'
                        }
                    }
                }
            }
        }
        isLightbox = ${props.isLightbox}
        lightboxIframeSrc = ${props.lightboxIframeSrc}
        href = Neos.Fusion:Case {
            fromOverview {
                condition = ${props.overviewData}
                renderer = ${props.overviewData.href}
            }
            default {
                condition = true
                renderer = Neos.Neos:NodeUri {
                    node = ${props.node}
                    format = 'html'
                }
            }
        }
        firstImage = Litefyr.Integration:Helper.FirstImage {
            node = ${props.node}
        }
        date = ${private.dateProperty ? q(props.node).property(private.dateProperty) : null}
        image = ${this.firstImage ? this.firstImage.asset : null}
        alternativeText = ${this.firstImage ? this.firstImage.alternativeText : null}
    }
}
